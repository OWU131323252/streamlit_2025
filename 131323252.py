import streamlit as st
import random
import matplotlib.pyplot as plt


traits = {
    "Charm": [
        "王の前でも堂々と話せる気がする",
        "人前で歌ったり演じるのが好きだ",
        "初対面でもすぐに仲良くなれる",
        "自分の話で周囲を楽しませたいと思う",
        "自然と人の注目を集める",
        "魅力を褒められることが多い",
        "人を説得するのが得意だ",
        "注目の中心になるのが好きだ"
    ],
    "Wisdom": [
        "曖昧な直感が当たることが多い",
        "瞑想や思索の時間が必要だと感じる",
        "過去の出来事を深く分析する癖がある",
        "人の嘘や本音を敏感に察知できる",
        "複雑な問題を解くのが好きだ",
        "新しい知識を常に求めている",
        "決断は慎重に行う方だ",
        "他人が見落とす細かいことに気付く"
    ],
    "Creativity": [
        "空に浮かぶ雲を眺めていると物語が浮かぶ",
        "芸術作品や音楽に強く感動する",
        "空想にふける時間が一番好きだ",
        "日常の中で新しいアイデアがどんどん湧く",
        "独創的なものを作りたいと思う",
        "物事を違った視点から見ることができる",
        "問題の解決策を考えるのが好きだ",
        "想像力が豊かで活発だ"
    ],
    "Courage": [
        "怖くてもやるしかないと思う",
        "リスクをとってでも挑戦したい",
        "自分が先頭に立つことが多い",
        "逆境に燃えるタイプだ",
        "簡単に諦めない",
        "挑戦を楽しむ",
        "信念を貫く",
        "プレッシャーの中でも決断できる"
    ],
    "Loyalty": [
        "仲間を決して見捨てない自信がある",
        "誰かのために尽くすのが好きだ",
        "信頼されると全力で応えたくなる",
        "仲間を守るためなら自分を犠牲にできる",
        "長く続く関係を大切にする",
        "約束は必ず守る",
        "困難な時でも頼りになる",
        "見返りを求めず助けることが多い"
    ],
    "Justice": [
        "間違いを見て見ぬふりはできない",
        "ルールは守るべきだと思う",
        "正しいと思うことには従う",
        "人を公平に評価しようとする",
        "不正に立ち向かう勇気がある",
        "平等を強く信じている",
        "状況を慎重に判断する",
        "弱い者を守ることを重視する"
    ],
    "Independence": [
        "一人での冒険が向いていると思う",
        "周囲に合わせすぎると疲れる",
        "単独行動の方が落ち着く",
        "人に頼るより自分で解決したい",
        "自分の判断を信じている",
        "自由に動くのが好きだ",
        "他人にコントロールされたくない",
        "自分のペースを大切にしている"
    ],
    "Compassion": [
        "涙を流す人を見て放っておけない",
        "困っている人を見ると声をかけたくなる",
        "動物や子どもに自然と優しくしてしまう",
        "他人の痛みに強く共感してしまう",
        "見返りを求めず助けることが多い",
        "他人の気持ちを理解しようと努力する",
        "周囲の人の幸せを気にかけている",
        "よく人を慰めることがある"
    ]
}



trait_to_status = {
    "Charm": "Luck",
    "Wisdom": "Magic",
    "Creativity": "Magic",
    "Courage": "HP",
    "Loyalty": "Defense",
    "Justice": "Defense",
    "Independence": "Speed",
    "Compassion": "Luck"
}

atk_traits = ["Courage", "Creativity", "Independence"]

character_classes = [
    {
        "name": "運命の旅人 🌌",
        "description": (
            "あなたは運命の旅人。直感と偶然の中で生き、世界に導かれし自由な魂です。常識に縛られず、独自の視点で物事を捉え、"
            "どんな状況でも自分のペースを崩さずに歩む力を持っています。時に周囲が理解できないようなひらめきや直感に従い、"
            "予測不能な展開を楽しむことができるでしょう。あなたの人生はまるで星々が織りなす銀河の旅のように多彩で、"
            "偶然の出会いを運命に変える力があります。自由を愛し、束縛を嫌い、自分だけの道を切り開く姿は、多くの人に刺激を与え、"
            "新たな可能性を拓く灯火となるでしょう。困難に遭遇しても、星空を見上げれば希望が湧き、自信と勇気を取り戻せます。"
            "あなたの生き様は、まさに世界のどこにもない唯一無二の冒険譚なのです。"
        ),
        "conditions": lambda s: s.get("Luck", 0) >= 30 and s.get("Speed", 0) >= 30
    },
    {
        "name": "古代の魔導士 🧙‍♂️",
        "description": (
            "あなたは古代の魔導士のように、知恵と創造の深淵を覗き込み、その神秘を操る存在です。長い年月をかけて磨き上げた洞察力は、"
            "時に人の想像を超えた真実を見通す力となり、あなたの周囲に安らぎと新たな知識をもたらします。知的好奇心が旺盛で、"
            "未知の世界への探求心を止めることはありません。困難にぶつかっても冷静に分析し、解決の糸口を探し出すことができるため、"
            "人々から頼りにされる存在です。あなたの思考の深さは、周囲の枠を超えた創造性を引き出し、未来を切り拓く魔力へと昇華します。"
            "どんな障害も知恵の力で乗り越え、時代を超えて伝説として語り継がれるでしょう。"
        ),
        "conditions": lambda s: s.get("Magic", 0) >= 10 and s.get("Defense", 0) < 10
    },
    {
        "name": "神殿の守護騎士 🛡",
        "description": (
            "あなたは神殿の守護騎士。忠義と責任感を胸に刻み、どんな困難にも立ち向かう揺るぎない強さを持っています。"
            "仲間や信念を守るためなら、己の身を犠牲にすることも厭わない覚悟を持つあなたは、まさに信頼と尊敬の象徴です。"
            "その姿は人々に安心感と勇気を与え、あなたの周囲には自然と人が集まります。堅牢な防御力と体力はまさに鉄壁の要塞。"
            "しかし、ただの力強さだけでなく、内に秘めた優しさや慈愛も兼ね備えているため、多くの者があなたを慕います。"
            "困難を乗り越えるたびにあなたの名声は高まり、伝説の守護騎士として永遠に語り継がれるでしょう。"
        ),
        "conditions": lambda s: s.get("HP", 0) >= 15 and s.get("Defense", 0) >= 10
    },
    {
        "name": "風追いの盗賊 🗡",
        "description": (
            "あなたは風追いの盗賊。自由とスピードを愛し、リスクを恐れず大胆に行動する挑戦者タイプです。"
            "素早さと運を武器に、どんな局面でも機敏に動き、予想外の奇襲や脱出を成功させることができます。"
            "決断力と直感力に優れ、複雑な状況でも瞬時に最善の選択を下せるため、仲間や敵からも一目置かれます。"
            "あなたの生き様は常に冒険と刺激に満ちており、束縛を嫌う自由な魂。"
            "その姿はまるで風のように軽やかで、いつも新たな刺激を求め続けるでしょう。危険を恐れないその勇気は多くの物語の主役となります。"
        ),
        "conditions": lambda s: s.get("Speed", 0) >= 15 and s.get("Luck", 0) >= 15
    },
    {
        "name": "星詠みの占術士 🔮",
        "description": (
            "あなたは星詠みの占術士。宇宙の神秘と星の導きを感じ取り、人々の未来を見通す力を持っています。"
            "感性と共感力に優れ、他者の心の奥底に触れることができるため、周囲からは天性のアドバイザーとして信頼されています。"
            "あなたの助言は単なる予言ではなく、的確な洞察と深い理解に基づいており、多くの人の道標となります。"
            "運と直感に導かれたあなたの人生は、不思議な偶然や奇跡に彩られています。"
            "時には自らの内なる声に耳を傾けることが、未来を切り開く鍵となるでしょう。"
            "その神秘的な存在感は、周囲の人々に安心感と希望をもたらします。"
        ),
        "conditions": lambda s: s.get("Luck", 0) >= 40
    },
    {
        "name": "聖光の癒し手 ✨",
        "description": (
            "あなたは聖光の癒し手。人々を癒やすことに喜びを感じ、優しさと知性を兼ね備えた包容力のある存在です。"
            "その存在自体が周囲の心を温かく包み込み、どんな時も支えとなるでしょう。"
            "魔力と運に恵まれたあなたは、傷ついた者を癒す力だけでなく、精神的な強さも持ち合わせています。"
            "多くの人々から頼りにされ、あなたの癒しの手は幾多の困難を乗り越える希望となるでしょう。"
            "困難に直面したときも、その温かな光が心の闇を払うのです。"
            "あなたの存在は、まさに聖なる光のように多くの人の人生に光を灯し続けるでしょう。"
        ),
        "conditions": lambda s: s.get("Luck", 0) >= 5 and s.get("Magic", 0) >= 10
    },
    {
        "name": "鋼鉄の拳闘士 🥊",
        "description": (
            "あなたは鋼鉄の拳闘士。強靭な意志と圧倒的な行動力で周囲を引っ張るリーダータイプです。"
            "考えるよりも動くことを好み、目の前の課題に真っ向から挑みます。"
            "体力に恵まれ、肉体的な強さはまさに鉄の如し。魔力が控えめな分、純粋なパワーで敵を圧倒します。"
            "あなたの拳は困難を粉砕し、挑戦者たちに勇気を与える象徴となるでしょう。"
            "そのエネルギッシュな姿勢は、仲間にとっても刺激となり、皆を鼓舞します。"
            "努力と根性で築き上げた鋼の肉体と精神は、数多の戦いで輝きを放つでしょう。"
        ),
        "conditions": lambda s: s.get("HP", 0) >= 10 and s.get("Magic", 0) <= 5
    },
    {
        "name": "影の諜報員 🕵️‍♂️",
        "description": (
            "あなたは影の諜報員。沈黙の中に知恵を宿し、冷静かつ計画的に物事を動かすクールな観察者です。"
            "素早さと運に長け、どんな状況でも迅速に情報を収集し、敵の一歩先を読みます。"
            "あなたの計画性と判断力は多くの作戦成功の鍵となり、周囲から絶大な信頼を得ています。"
            "秘密裏に行動しながらも、その存在感は圧倒的であり、闇の中で光る鋭い眼差しは誰もが畏怖するでしょう。"
            "あなたの冷静な分析力は、多くの危機を未然に防ぎ、未来を見通す力となっています。"
            "孤独を厭わず、使命感に燃えて任務を遂行する姿はまさに影の英雄です。"
        ),
        "conditions": lambda s: s.get("Speed", 0) >= 15 and s.get("Luck", 0) <= 10
    },
    {
        "name": "紅蓮の戦巫女 🔥",
        "description": (
            "あなたは紅蓮の戦巫女。燃え盛る情熱と揺るぎない信念で、自らの信じる道を突き進む炎の戦士です。"
            "魔力と体力を兼ね備えたあなたは、戦いの中で真価を発揮し、仲間を鼓舞しながら勝利へと導きます。"
            "その強い意志は逆境においても決して折れることなく、周囲に熱い感動を与え続けるでしょう。"
            "あなたの情熱は単なる炎ではなく、希望の光となり、多くの者の心を照らし続けます。"
            "戦いの場だけでなく、日常でもその強さと優しさが共存し、あなたは人々の尊敬と信頼を集めるでしょう。"
            "不屈の精神で前進し、紅蓮の炎のごとく鮮やかな人生を歩み続けてください。"
        ),
        "conditions": lambda s: s.get("Magic", 0) >= 25 and s.get("HP", 0) >= 20
    },
    {
        "name": "秩序の裁定者 ⚖️",
        "description": (
            "あなたは秩序の裁定者。正義感と責任感に溢れ、どんな状況でも公平とルールを重んじる堅実派です。"
            "防御力と運を兼ね備えたあなたは、組織や社会の中で調和を保つための要となります。"
            "間違いを見過ごすことができず、常に正しい判断を下そうと努力し、その姿勢は多くの人々から尊敬されています。"
            "あなたの存在は秩序の象徴であり、混沌の中でも冷静にバランスを取り続けます。"
            "その堅実さは時に保守的とも取られますが、真の強さは責任を全うすることにあります。"
            "秩序の裁定者として、あなたは未来のために公平な判断を続けていくでしょう。"
        ),
        "conditions": lambda s: s.get("Defense", 0) >= 5 and s.get("Luck", 0) < 1
    },
    {
        "name": "夢紡ぎの吟遊詩人 🎻",
        "description": (
            "あなたは夢紡ぎの吟遊詩人。豊かな想像力と表現力で人々の心を揺さぶり、感動を生み出すストーリーテラーです。"
            "魔力と運に恵まれたあなたは、言葉や音楽、芸術を通じて共感の輪を広げ、周囲に希望や癒しをもたらします。"
            "あなたの創造力は枠に囚われず、常に新しい物語を紡ぎ出すことで人々を魅了します。"
            "夢の世界に生きるあなたは、時に現実を超えたインスピレーションを受け取り、それがあなたの魅力の源です。"
            "人の心の奥底に触れることができるあなたの表現は、多くの人に深い感動と共感を呼び起こすでしょう。"
            "その夢紡ぎの才能は、まさに人生を豊かに彩る宝物となるのです。"
        ),
        "conditions": lambda s: s.get("Magic", 0) >= 5 and s.get("Luck", 0) >= 10
    },
    {
        "name": "見習い冒険者 👣",
        "description": (
            "あなたは見習い冒険者。まだ道半ばで経験は浅いものの、無限の可能性と柔軟性を持つ若き探求者です。"
            "どんな道にでも進むことができる自由な心と新鮮な感性で、日々成長と学びを続けています。"
            "失敗を恐れず挑戦し続ける姿勢は、周囲の人々に勇気と希望を与えるでしょう。"
            "まだ確立されていない自分のスタイルを模索しつつ、多くの出会いや経験を通じて、確かな力を蓄えていきます。"
            "未来はあなたの手の中にあり、これからの選択次第でどんな英雄にもなり得るでしょう。"
            "その若さと情熱は、まさにこれからの冒険の始まりを告げる鐘の音です。"
        ),
        "conditions": lambda s: s.get("Magic", 0) == 0 and s.get("Luck", 0) ==0
    }
]


def determine_class(status_scores):
    for char in character_classes:
        if char["conditions"](status_scores):
            return char["name"], char["description"]
    return "Novice Adventurer 👣", "Still developing, with limitless potential."

# Streamlit UI
st.title("🏰 異世界性格診断")
st.markdown("もしもあなたが異世界に転生したら、職業はいったい何になる！？という性格診断アプリです。　診断開始ボタンをダブルクリックで始まります。")
st.markdown("---")

if "started" not in st.session_state:
    st.session_state.started = False
if "questions" not in st.session_state:
    # 質問をランダムにシャッフルして一度だけセット
    questions = []
    for trait, qs in traits.items():
        for q in qs:
            questions.append({"text": q, "trait": trait})
    random.shuffle(questions)
    st.session_state.questions = questions

if not st.session_state.started:
    if st.button("🎯 診断開始"):
        st.session_state.started = True
    st.stop()

# 質問フォーム表示
with st.form("quiz_form"):
    st.header("📜 以下の質問に答えてください")
    options = ["まったく当てはまらない", "あまり当てはまらない", "どちらともいえない", "やや当てはまる", "とても当てはまる"]
    answers = {}
    for i, q in enumerate(st.session_state.questions):
        key = f"q_{i}"
        answers[i] = st.radio(f"**{i+1}. {q['text']}**", options, key=key, horizontal=True)

    submitted = st.form_submit_button("🔮 診断する")

if submitted:
    # 回答集計
    trait_scores = {}
    for i, response in answers.items():
        trait = st.session_state.questions[i]["trait"]
        score = options.index(response) + 1
        trait_scores[trait] = trait_scores.get(trait, 0) + score

    # ステータス変換
    status_scores = {}
    for trait, total in trait_scores.items():
        status = trait_to_status.get(trait, None)
        if status:
            status_scores[status] = status_scores.get(status, 0) + total

    # ATK計算
    atk_score = sum(trait_scores.get(t, 0) for t in atk_traits)
    atk_score = int(atk_score / len(atk_traits))
    status_scores["ATK"] = atk_score

    # クラス診断
    char_class, class_desc = determine_class(status_scores)

    st.markdown("---")
    st.header("🎖 あなたの職業")
    st.subheader(f"**{char_class}**")
    st.caption(class_desc)

    #ステータスグラフ
    st.header("📊 ステータス")
    status_order = ["HP", "Magic", "Defense", "Speed", "Luck", "ATK"]
    status_values = [status_scores.get(k, 0) * 5 for k in status_order]  
    fig, ax = plt.subplots(figsize=(8, 4))
    bars = ax.bar(status_order, status_values, color='skyblue', edgecolor='black')

    ax.set_ylabel("SCORE")
    ax.set_ylim(0, max(status_values) + 20)
    ax.grid(axis='y', linestyle='--', alpha=0.7)
    ax.set_xticklabels(status_order, rotation=0) 
    st.pyplot(fig)
